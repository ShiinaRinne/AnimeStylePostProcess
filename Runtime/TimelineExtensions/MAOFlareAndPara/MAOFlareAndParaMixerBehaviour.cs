// This code is automatically generated by MAO Timeline Playable Wizard.
// For more information, please visit 
// https://github.com/ShiinaRinne/TimelineExtensions

using System;
using UnityEngine;
using UnityEngine.Timeline;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;

public class MAOFlareAndParaMixerBehaviour : PlayableBehaviour
{
    float m_DefaultFlareInstensity;
    float m_DefaultFlareInteration;
    Color m_DefaultInnerColor;
    Color m_DefaultOuterColor;
    float m_DefaultColorMixedMidPoint;
    float m_DefaultColorMixedSoftness;
    float m_DefaultFlareRange;
    bool m_DefaultRotateWithMainLight;
    float m_DefaultExtraRotation;
    float m_DefaultParaIntensity;
    float m_DefaultParaRange;
    float m_DefaultParaRotation;

    FlareAndParaVolume m_TrackBinding;
    bool m_FirstFrameHappened;

    public override void ProcessFrame(Playable playable, FrameData info, object playerData)
    {
        ((Volume) playerData).profile.TryGet(out m_TrackBinding);
        if (m_TrackBinding == null)
            return;
        
        if(!m_FirstFrameHappened)
        {
            m_DefaultFlareInstensity = m_TrackBinding.flareInstensity.value;
            m_DefaultFlareInteration = m_TrackBinding.flareIteration.value;
            m_DefaultInnerColor = m_TrackBinding.innerColor.value;
            m_DefaultOuterColor = m_TrackBinding.outerColor.value;
            m_DefaultColorMixedMidPoint = m_TrackBinding.colorMixedMidPoint.value;
            m_DefaultColorMixedSoftness = m_TrackBinding.colorMixedSoftness.value;
            m_DefaultFlareRange = m_TrackBinding.flareRange.value;
            m_DefaultRotateWithMainLight = m_TrackBinding.rotateWithMainLight.value;
            m_DefaultExtraRotation = m_TrackBinding.extraRotation.value;
            m_DefaultParaIntensity = m_TrackBinding.paraIntensity.value;
            m_DefaultParaRange = m_TrackBinding.paraRange.value;
            m_DefaultParaRotation = m_TrackBinding.paraRotation.value;

            m_FirstFrameHappened = true;
        }


        int inputCount = playable.GetInputCount();
        float blendedFlareInstensity = 0f;
        float blendedFlareInteration = 0;
        Color blendedInnerColor = Color.clear;
        Color blendedOuterColor = Color.clear;
        float blendedColorMixedMidPoint = 0f;
        float blendedColorMixedSoftness = 0f;
        float blendedFlareRange = 0f;
        bool blendedRotateWithMainLight = false;
        float blendedExtraRotation = 0f;
        float blendedParaIntensity = 0f;
        float blendedParaRange = 0f;
        float blendedParaRotation = 0f;

        float totalWeight = 0f;
        float greatestWeight = 0f;
        int currentInputs = 0;

        for(int i = 0; i < inputCount; i++)
        {
            float inputWeight = playable.GetInputWeight(i);
            ScriptPlayable<MAOFlareAndParaBehaviour> inputPlayable =(ScriptPlayable<MAOFlareAndParaBehaviour>)playable.GetInput(i);
            MAOFlareAndParaBehaviour input = inputPlayable.GetBehaviour();
            
            blendedFlareInstensity += input.FlareInstensity * inputWeight;
            blendedFlareInteration += input.FlareInteration * inputWeight;
            blendedInnerColor += input.InnerColor * inputWeight;
            blendedOuterColor += input.OuterColor * inputWeight;
            blendedColorMixedMidPoint += input.ColorMixedMidPoint * inputWeight;
            blendedColorMixedSoftness += input.ColorMixedSoftness * inputWeight;
            blendedFlareRange += input.FlareRange * inputWeight;
            blendedRotateWithMainLight = inputWeight > 0.5 ? input.RotateWithMainLight : blendedRotateWithMainLight;
            blendedExtraRotation += input.ExtraRotation * inputWeight;
            blendedParaIntensity += input.ParaIntensity * inputWeight;
            blendedParaRange += input.ParaRange * inputWeight;
            blendedParaRotation += input.ParaRotation * inputWeight;

            totalWeight += inputWeight;

            if (inputWeight > greatestWeight)
            {
                greatestWeight = inputWeight;
            }

            if (!Mathf.Approximately (inputWeight, 0f))
                currentInputs++;
        }
        m_TrackBinding.flareInstensity.value = blendedFlareInstensity + m_DefaultFlareInstensity * (1f-totalWeight);
        m_TrackBinding.flareIteration.value = Mathf.RoundToInt(blendedFlareInteration + m_DefaultFlareInteration * (1f-totalWeight));
        m_TrackBinding.innerColor.value = blendedInnerColor + m_DefaultInnerColor * (1f-totalWeight);
        m_TrackBinding.outerColor.value = blendedOuterColor + m_DefaultOuterColor * (1f-totalWeight);
        m_TrackBinding.colorMixedMidPoint.value = blendedColorMixedMidPoint + m_DefaultColorMixedMidPoint * (1f-totalWeight);
        m_TrackBinding.colorMixedSoftness.value = blendedColorMixedSoftness + m_DefaultColorMixedSoftness * (1f-totalWeight);
        m_TrackBinding.flareRange.value = blendedFlareRange + m_DefaultFlareRange * (1f-totalWeight);
        m_TrackBinding.rotateWithMainLight.value = blendedRotateWithMainLight;
        m_TrackBinding.extraRotation.value = blendedExtraRotation + m_DefaultExtraRotation * (1f-totalWeight);
        m_TrackBinding.paraIntensity.value = blendedParaIntensity + m_DefaultParaIntensity * (1f-totalWeight);
        m_TrackBinding.paraRange.value = blendedParaRange + m_DefaultParaRange * (1f-totalWeight);
        m_TrackBinding.paraRotation.value = blendedParaRotation + m_DefaultParaRotation * (1f-totalWeight);

    }



    public override void OnPlayableDestroy (Playable playable)
    {
        m_FirstFrameHappened = false;

        if(m_TrackBinding == null)
            return;

        m_TrackBinding.flareInstensity.value = m_DefaultFlareInstensity;
        m_TrackBinding.flareIteration.value = m_DefaultFlareInteration;
        m_TrackBinding.innerColor.value = m_DefaultInnerColor;
        m_TrackBinding.outerColor.value = m_DefaultOuterColor;
        m_TrackBinding.colorMixedMidPoint.value = m_DefaultColorMixedMidPoint;
        m_TrackBinding.colorMixedSoftness.value = m_DefaultColorMixedSoftness;
        m_TrackBinding.flareRange.value = m_DefaultFlareRange;
        m_TrackBinding.rotateWithMainLight.value = m_DefaultRotateWithMainLight;
        m_TrackBinding.extraRotation.value = m_DefaultExtraRotation;
        m_TrackBinding.paraIntensity.value = m_DefaultParaIntensity;
        m_TrackBinding.paraRange.value = m_DefaultParaRange;
        m_TrackBinding.paraRotation.value = m_DefaultParaRotation;

    }
}
